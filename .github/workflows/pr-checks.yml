name: PR Checks

on:
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  # 並列実行グループ1: 型チェック  
  type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        with:
          version: 10.15.1

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '20'



      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm -r build

      - name: Type check
        run: pnpm -r exec tsc --noEmit

  # 並列実行グループ2: テスト
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        with:
          version: 10.15.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm -r build

      - name: Run tests
        run: pnpm run test

  # 並列実行グループ3: CDK Dry-Run
  cdk-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        with:
          version: 10.15.1

      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: build-artifacts

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838
        with:
          role-to-assume: ${{ secrets.CDK_DEPLOY_ROLE_ARN }}
          role-session-name: github-actions-oidc
          aws-region: ap-northeast-1

      - name: CDK Dry-Run Deploy
        working-directory: ./apps/headless-crawler
        env:
          MAIL_ADDRESS: "dummy@example.com"
        run: |
          npm install -g aws-cdk
          pnpm exec cdk deploy --all --require-approval never --no-execute-changeset

  # 最終ステップ: フォーマット適用とコミット（全チェック通過後）
  format-and-commit:
    runs-on: ubuntu-latest
    needs: [type-check, test, cdk-check]
    if: always() && (needs.type-check.result == 'success' || needs.type-check.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.cdk-check.result == 'success' || needs.cdk-check.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Disable husky
        run: git config core.hooksPath /dev/null

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        with:
          version: 10.15.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Format & Lint changed files
        shell: bash
        run: |
          mapfile -t CHANGED_FILES < <(
            git diff --name-only --diff-filter=ACMR origin/main...HEAD | grep -E '\.(js|ts|jsx|tsx)$'
          )

          if [ ${#CHANGED_FILES[@]} -gt 0 ]; then
            echo "Changed files: ${CHANGED_FILES[@]}"
            pnpm exec biome format --write "${CHANGED_FILES[@]}"
            pnpm exec biome lint --write --no-errors-on-unmatched "${CHANGED_FILES[@]}"
            git add "${CHANGED_FILES[@]}"
          else
            echo "No JS/TS/JSX/TSX files changed"
          fi

      - name: Check if formatting or linting changed files
        id: format-check
        run: |
          if git diff --cached --quiet; then
            echo "formatted=false" >> $GITHUB_OUTPUT
          else
            echo "formatted=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit formatting & lint fixes
        if: steps.format-check.outputs.formatted == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "style: auto-format and lint fixes [skip ci]"
          git push

      - name: Comment on PR if formatted
        if: steps.format-check.outputs.formatted == 'true'
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🎨 Code has been automatically formatted and linted.'
            })
