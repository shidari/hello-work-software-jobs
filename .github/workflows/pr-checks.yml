name: PR Checks

on:
  pull_request:
    branches: [main]

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      # 2. Disable husky (for CI, kill hooks)
      - name: Disable husky
        run: git config core.hooksPath /dev/null

      # 3. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '20'

      # 4. Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        with:
          version: 10.15.1

      # 5. Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 6. Build
      - name: Build packages
        run: pnpm -r build

      # 7. Type check
      - name: Type check
        run: pnpm -r exec tsc --noEmit
        continue-on-error: false

      # 8. Run tests
      - name: Run tests
        run: pnpm run test
        continue-on-error: false

      # 8.5 CDK Dry-Run Deploy (モノレポ対応)
      - name: CDK Dry-Run Deploy
        working-directory: ./packages/headless-crawler
        env:
          CDK_DEFAULT_ACCOUNT: 000000000000  # ダミーアカウント
          CDK_DEFAULT_REGION: ap-northeast-1 # 任意のリージョン
          MAIL_ADDRESS: "dummy@example.com"  # ダミーアドレスで空文字回避
          QUEUE_URL: ""                        # 必要に応じて空文字
          API_KEY: ""                          # 必要に応じて空文字
        run: |
          # CDK CLI インストール
          npm install -g aws-cdk

          # 依存関係インストール
          pnpm install

          # 空デプロイ（ChangeSet作成のみ、実リソースは作らない）
          pnpm exec cdk deploy --all --require-approval never --no-execute-changeset

      # 9. Format & Lint changed files
      - name: Format & Lint changed files
        run: |
          mapfile -t CHANGED_FILES < <(
            git diff --name-only --diff-filter=ACMR origin/main...HEAD | grep -E '\.(js|ts|jsx|tsx)$'
          )

          if [ ${#CHANGED_FILES[@]} -gt 0 ]; then
            echo "Changed files: ${CHANGED_FILES[@]}"

            pnpm exec biome format --write "${CHANGED_FILES[@]}"
            pnpm exec biome lint --write --no-errors-on-unmatched "${CHANGED_FILES[@]}"
            git add "${CHANGED_FILES[@]}"
          else
            echo "No JS/TS/JSX/TSX files changed"
          fi

      # 10. Check if formatting or linting changed files
      - name: Check if formatting or linting changed files
        id: format-check
        run: |
          if git diff --cached --quiet; then
            echo "formatted=false" >> $GITHUB_OUTPUT
          else
            echo "formatted=true" >> $GITHUB_OUTPUT
          fi

      # 11. Commit formatting & lint fixes
      - name: Commit formatting & lint fixes
        if: steps.format-check.outputs.formatted == 'true'
        run: |
          git config core.hooksPath /dev/null
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "style: auto-format and lint fixes [skip ci]"
          git push

      # 12. Comment on PR if formatted
      - name: Comment on PR if formatted
        if: steps.format-check.outputs.formatted == 'true'
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🎨 Code has been automatically formatted and linted.'
            })
